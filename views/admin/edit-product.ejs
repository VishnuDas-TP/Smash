<%- include("../../views/partails/admin/header.ejs") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>

<style>
    .image-upload-box {
        border: 2px dashed #ccc;
        border-radius: 10px;
        height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
        position: relative;
    }

    .image-upload-box:hover {
        background-color: #f8f9fa;
    }

    .image-upload-box img {
        max-width: 100%;
        max-height: 180px;
        object-fit: contain;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .form-control.is-invalid:focus,
    .form-select.is-invalid:focus {
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
    }

    #imagePreviewModal .modal-dialog {
        max-width: 800px;
    }

    #imagePreviewModal .cropper-container {
        max-height: 500px;
    }

    .remove-image-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
    }
</style>

<div class="container-fluid">
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/editProduct?id=<%= product._id %>"
                            enctype="multipart/form-data" id="productForm">
                            <input type="hidden" name="productId" id="productId" value="<%= product._id %>">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" placeholder="Type here" name="productName"
                                        class="form-control" id="product_name" value="<%= product.productName %>">
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <option value="" disabled>Select a brand</option>
                                        <% if (brand && brand.length > 0) { %>
                                            <% brand.forEach(b => { %>
                                                <option value="<%= b.brandName %>"
                                                    <%= product.brand === b.brandName ? 'selected' : '' %>>
                                                    <%= b.brandName %>
                                                </option>
                                            <% }) %>
                                        <% } else { %>
                                            <option value="" disabled>No brands available</option>
                                        <% } %>
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="description" name="description" class="form-control border"
                                    rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text"
                                            class="form-control border" value="<%= product.salePrice %>">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input placeholder="" name="quantity" type="text"
                                            class="form-control border" value="<%= product.quantity %>">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border"
                                            value="<%= product.color %>">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" name="category">
                                                <option value="" disabled>Select a category</option>
                                                <% if (category && category.length > 0) { %>
                                                    <% category.forEach(cat => { %>
                                                        <option value="<%= cat.name %>"
                                                            <%= product.category && product.category.name === cat.name ? 'selected' : '' %>>
                                                            <%= cat.name %>
                                                        </option>
                                                    <% }) %>
                                                <% } else { %>
                                                    <option value="" disabled>No categories available</option>
                                                <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <% for(let i=0; i<4; i++) { %>
                                            <div class="col-md-3 mb-3">
                                                <div class="image-upload-box" id="imageBox<%= i %>"
                                                    data-index="<%= i %>">
                                                    <button type="button" class="remove-image-btn"
                                                        data-index="<%= i %>">Ã—</button>
                                                    <img src="<%= product.productImage[i] ? '/uploads/product-images/' + product.productImage[i] : '' %>"
                                                        id="previewImage<%= i %>" <%= product.productImage[i] ? '' : 'style="display:none;"' %>>
                                                    <div class="text-center" <%= product.productImage[i] ? 'style="display:none;"' : '' %>>
                                                        <i class="fas fa-cloud-upload-alt"></i>
                                                        <p>Choose Image</p>
                                                    </div>
                                                    <input type="file" name="images" id="imageInput<%= i %>"
                                                        accept="image/*" style="display:none;">
                                                </div>
                                                <div id="imageError<%= i %>" class="error-message"></div>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary" onclick="handleFormSubmit()">Update Product</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<!-- Image Preview and Crop Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop and Preview Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                    </div>
                    <div class="col-md-4">
                        <div id="previewContainer">
                            <div class="preview"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCroppedImage">Save Image</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
    let currentImageIndex = 0;
    let cropper;
    const validImageFormats = ['image/jpeg', 'image/png', 'image/jpg'];

    // Image handling
    document.querySelectorAll('.image-upload-box').forEach(box => {
        const previewImg = box.querySelector('img');
        const textCenter = box.querySelector('div.text-center');
        const input = box.querySelector('input[type="file"]');

        box.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-image-btn')) return;
            input.click();
        });

        input.addEventListener('change', function (event) {
            currentImageIndex = this.closest('.image-upload-box').dataset.index;
            const file = event.target.files[0];

            if (file) {
                if (!validImageFormats.includes(file.type)) {
                    displayErrorMessage(`imageError${currentImageIndex}`, 'Only JPG/PNG allowed');
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    displayErrorMessage(`imageError${currentImageIndex}`, 'Image must be less than 5MB');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function (e) {
                    try {
                        const imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
                        const cropperImage = document.getElementById('cropperImage');
                        cropperImage.src = e.target.result;

                        if (cropper) cropper.destroy();
                        
                        imagePreviewModal.show();
                        setTimeout(() => {
                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                                preview: '.preview'
                            });
                        }, 500);
                    } catch (error) {
                        console.error('Error opening cropper:', error);
                        Swal.fire('Error', 'Failed to open image cropper', 'error');
                    }
                };
                reader.readAsDataURL(file);
            }
        });
    });

    // Remove image
    document.querySelectorAll('.remove-image-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            const index = this.dataset.index;
            const imageBox = document.getElementById(`imageBox${index}`);
            const previewImg = imageBox.querySelector('img');
            const textCenter = imageBox.querySelector('.text-center');
            const input = imageBox.querySelector('input[type="file"]');
            const productId = document.getElementById('productId').value;

            if (previewImg.src && !previewImg.src.endsWith('/')) {
                const imageName = previewImg.src.split('/').pop();
                fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        imageNameToServer: imageName,
                        productIdToServer: productId
                    })
                })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to delete image');
                    return response.json();
                })
                .then(data => {
                    if (data.status) {
                        previewImg.src = '';
                        previewImg.style.display = 'none';
                        textCenter.style.display = 'flex';
                        input.value = '';
                    }
                })
                .catch(error => {
                    console.error('Error deleting image:', error);
                    Swal.fire('Error', 'Failed to delete image', 'error');
                });
            }
        });
    });

    // Save cropped image
    document.getElementById('saveCroppedImage').addEventListener('click', function () {
        try {
            const croppedCanvas = cropper.getCroppedCanvas();
            const previewImg = document.getElementById(`previewImage${currentImageIndex}`);
            const imageBox = document.getElementById(`imageBox${currentImageIndex}`);
            const imageInput = document.getElementById(`imageInput${currentImageIndex}`);
            const textCenter = imageBox.querySelector('.text-center');

            previewImg.src = croppedCanvas.toDataURL('image/jpeg');
            previewImg.style.display = 'block';
            textCenter.style.display = 'none';

            croppedCanvas.toBlob(blob => {
                const file = new File([blob], `cropped-image-${currentImageIndex}.jpg`, { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;
            });

            bootstrap.Modal.getInstance(document.getElementById('imagePreviewModal')).hide();
            cropper.destroy();
        } catch (error) {
            console.error('Error saving cropped image:', error);
            Swal.fire('Error', 'Failed to save cropped image', 'error');
        }
    });

    // Form submission
    function handleFormSubmit() {
        console.log('Form submit attempted');
        clearErrorMessages();
        const isValid = validateForm();

        if (isValid) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to update this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, update it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log('Form submitting...');
                    document.getElementById('productForm').submit();
                }
            });
        } else {
            console.log('Validation failed');
            Swal.fire('Error', 'Please fix the validation errors', 'error');
        }
    }

    // Validation
    function validateForm() {
        let isValid = true;
        console.log('Validating form...');
        
        // Product Name
        const productName = document.getElementsByName('productName')[0];
        const name = productName.value.trim();
        if (!name) {
            markInvalid(productName, 'productName-error', 'Product name is required');
            isValid = false;
        } else if (name.length < 3 || name.length > 100) {
            markInvalid(productName, 'productName-error', 'Must be 3-100 characters');
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s\-&()]+$/.test(name)) {
            markInvalid(productName, 'productName-error', 'Only letters, numbers, spaces, and -&() allowed');
            isValid = false;
        }
        
        // Brand
        const brandName = document.getElementsByName('brand')[0];
        const brand = brandName.value.trim()
        if (!brand) {
            markInvalid(brand, 'brand-error', 'Please select a brand');
            isValid = false;
        }
        
        // Description
        const description = document.getElementById('description');
        const desc = description.value.trim();
        if (!desc) {
            markInvalid(description, 'description-error', 'Description is required');
            isValid = false;
        } else if (desc.length < 10 || desc.length > 1000) {
            markInvalid(description, 'description-error', 'Must be 10-1000 characters');
            isValid = false;
        }

        // Regular Price
        const regularPrice = document.getElementsByName('regularPrice')[0];
        const regPrice = regularPrice.value.trim();
        if (!regPrice) {
            markInvalid(regularPrice, 'regularPrice-error', 'Regular price is required');
            isValid = false;
        } else if (!/^\d+(\.\d{1,2})?$/.test(regPrice) || parseFloat(regPrice) <= 0) {
            markInvalid(regularPrice, 'regularPrice-error', 'Must be a positive number with up to 2 decimals');
            isValid = false;
        }

        // Sale Price
        const salePrice = document.getElementsByName('salePrice')[0];
        const sPrice = salePrice.value.trim();
        if (!sPrice) {
            markInvalid(salePrice, 'salePrice-error', 'Sale price is required');
            isValid = false;
        } else if (!/^\d+(\.\d{1,2})?$/.test(sPrice) || parseFloat(sPrice) <= 0) {
            markInvalid(salePrice, 'salePrice-error', 'Must be a positive number with up to 2 decimals');
            isValid = false;
        } else if (parseFloat(sPrice) > parseFloat(regPrice)) {
            markInvalid(salePrice, 'salePrice-error', 'Sale price cannot exceed regular price');
            isValid = false;
        }

        // Quantity
        const quantity = document.getElementsByName('quantity')[0];
        const qty = quantity.value.trim();
        if (!qty) {
            markInvalid(quantity, 'quantity-error', 'Quantity is required');
            isValid = false;
        } else if (!/^\d+$/.test(qty) || parseInt(qty) < 0) {
            markInvalid(quantity, 'quantity-error', 'Must be a non-negative integer');
            isValid = false;
        }

        // Color
        const color = document.getElementsByName('color')[0];
        const clr = color.value.trim();
        if (!clr) {
            markInvalid(color, 'color-error', 'Color is required');
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(clr)) {
            markInvalid(color, 'color-error', 'Only letters and spaces allowed');
            isValid = false;
        } else if (clr.length < 2 || clr.length > 50) {
            markInvalid(color, 'color-error', 'Must be 2-50 characters');
            isValid = false;
        }

        // Category
        const category = document.getElementsByName('category')[0];
        if (!category.value.trim()) {
            markInvalid(category, 'category-error', 'Please select a category');
            isValid = false;
        }

        // Images
        const images = document.querySelectorAll('input[name="images"]');
        let hasImage = false;
        images.forEach((input, index) => {
            const previewImg = document.getElementById(`previewImage${index}`);
            if (input.files.length > 0 || (previewImg && previewImg.src && !previewImg.src.endsWith('/'))) {
                hasImage = true;
            }
        });
        if (!hasImage) {
            displayErrorMessage('imageError0', 'At least one image is required');
            document.getElementById('imageBox0').classList.add('is-invalid');
            isValid = false;
        }

        return isValid;
    }

    function markInvalid(element, errorId, message) {
        console.log(`Marking invalid: ${errorId} - ${message}`);
        element.classList.add('is-invalid');
        displayErrorMessage(errorId, message);
    }

    function displayErrorMessage(errorId, message) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            console.log(`Error displayed: ${errorId} - ${message}`);
        } else {
            console.error(`Error element not found: ${errorId}`);
        }
    }

    function clearErrorMessages() {
        console.log('Clearing error messages');
        document.querySelectorAll('.error-message').forEach(el => {
            el.textContent = '';
            el.style.display = 'none';
        });
        document.querySelectorAll('.is-invalid').forEach(el => {
            el.classList.remove('is-invalid');
        });
    }

    // Initial check
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Page loaded');
        if (!document.getElementById('productForm')) {
            console.error('Product form not found');
            Swal.fire('Error', 'Form initialization failed', 'error');
        }
    });
</script>

<%- include("../../views/partails/admin/footer.ejs") %>