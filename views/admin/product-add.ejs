<%- include("../../views/partails/admin/header.ejs") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>

<style>
    .image-upload-box {
        border: 2px dashed #ccc;
        border-radius: 10px;
        height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .image-upload-box:hover {
        background-color: #f8f9fa;
    }

    .image-upload-box img {
        max-width: 100%;
        max-height: 180px;
        object-fit: contain;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .form-control.is-invalid:focus,
    .form-select.is-invalid:focus {
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
    }

    #imagePreviewModal .modal-dialog {
        max-width: 800px;
    }

    #imagePreviewModal .cropper-container {
        max-height: 500px;
    }
</style>

<div class="container-fluid">
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <option value="" selected disabled>Select a brand</option>
                                        <% for(let i = 0; i < brand.length; i++) { %>
                                            <option value="<%= brand[i].brandName %>">
                                                <%= brand[i].brandName %>
                                            </option>
                                        <% } %>
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sales price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border" required>
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" name="category">
                                                <option value="" selected disabled>Select a category</option>
                                                <% for(let i=0;i<category.length;i++){%>
                                                    <option value="<%= category[i].name%>">
                                                        <%= category[i].name %>
                                                    </option>
                                                <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <% for(let i=1; i<=4; i++) { %>
                                            <div class="col-md-3 mb-3">
                                                <div class="image-upload-box" id="imageBox<%= i %>" data-index="<%= i %>">
                                                    <img src="" alt="Preview" id="previewImage<%= i %>" style="display:none;">
                                                    <div class="text-center">
                                                        <i class="fas fa-cloud-upload-alt"></i>
                                                        <p>Choose Image</p>
                                                    </div>
                                                    <input type="file" name="images" id="imageInput<%= i %>" accept="image/*" style="display:none;">
                                                </div>
                                                <div id="imageError<%= i %>" class="error-message"></div>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary" onclick="handleFormSubmit()">Publish Product</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<!-- Image Preview and Crop Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop and Preview Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                    </div>
                    <div class="col-md-4">
                        <div id="previewContainer">
                            <div class="preview"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCroppedImage">Save Image</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
    let currentImageIndex = 0;
    let cropper;
    const validImageFormats = ["image/jpeg", "image/png", "image/jpg"];

    document.querySelectorAll('.image-upload-box').forEach(box => {
        box.addEventListener('click', function () {
            const input = this.querySelector('input[type="file"]');
            input.click();
        });

        const input = box.querySelector('input[type="file"]');
        input.addEventListener('change', function (event) {
            const file = event.target.files[0];
            currentImageIndex = this.closest('.image-upload-box').dataset.index;
            
            if (file) {
                if (!validImageFormats.includes(file.type)) {
                    displayErrorMessage(`imageError${currentImageIndex}`, 'Invalid image format. Please upload JPG or PNG.');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
                    const cropperImage = document.getElementById('cropperImage');
                    cropperImage.src = e.target.result;
    
                    if (cropper) cropper.destroy();
                    
                    imagePreviewModal.show();
                    setTimeout(() => {
                        cropper = new Cropper(cropperImage, {
                            aspectRatio: 1,
                            viewMode: 1,
                            preview: '.preview',
                        });
                    }, 500);
                };
                reader.readAsDataURL(file);
            }
        });
    });

    document.getElementById('saveCroppedImage').addEventListener('click', function () {
        const croppedCanvas = cropper.getCroppedCanvas();
        const previewImg = document.getElementById(`previewImage${currentImageIndex}`);
        const imageBox = document.getElementById(`imageBox${currentImageIndex}`);
        const imageInput = document.getElementById(`imageInput${currentImageIndex}`);
    
        previewImg.src = croppedCanvas.toDataURL('image/jpeg');
        previewImg.style.display = 'block';
        imageBox.querySelector('div.text-center').style.display = 'none';
    
        croppedCanvas.toBlob(blob => {
            const file = new File([blob], `cropped-image-${currentImageIndex}.jpg`, { type: 'image/jpeg' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            imageInput.files = dataTransfer.files;
        });
    
        const imagePreviewModal = bootstrap.Modal.getInstance(document.getElementById('imagePreviewModal'));
        imagePreviewModal.hide();
        cropper.destroy();
    });

    function handleFormSubmit() {
        clearErrorMessages();
        const isValid = validateForm();

        if (isValid) {              
            Swal.fire({
                title: 'Are you sure?',
                text: "You are about to publish this product.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, publish it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Published!',
                        text: 'Your product has been successfully published.',
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        document.getElementById('productForm').submit();
                    });
                }
            });
        } 
        // No need for else block since errors are now shown individually
    }

    function validateForm() {
        let isValid = true;

        // Product Name
        const productNameInput = document.getElementsByName('productName')[0];
        const productName = productNameInput.value.trim();
        if (!productName) {
            markInvalid(productNameInput, 'productName-error', 'Product name is required.');
            isValid = false;
        } else if (productName.length < 3 || productName.length > 100) {
            markInvalid(productNameInput, 'productName-error', 'Product name must be between 3 and 100 characters.');
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s\-&()]+$/.test(productName)) {
            markInvalid(productNameInput, 'productName-error', 'Product name can only contain letters, numbers, spaces, and -&().');
            isValid = false;
        }

        // Brand
        const brandSelect = document.getElementsByName('brand')[0];
        const brand = brandSelect.value.trim();
        if (!brand) {
            markInvalid(brandSelect, 'brand-error', 'Please select a brand.');
            isValid = false;
        }

        // Description
        const descriptionInput = document.getElementById('descriptionid');
        const description = descriptionInput.value.trim();
        if (!description) {
            markInvalid(descriptionInput, 'description-error', 'Product description is required.');
            isValid = false;
        } else if (description.length < 10 || description.length > 1000) {
            markInvalid(descriptionInput, 'description-error', 'Description must be between 10 and 1000 characters.');
            isValid = false;
        }

        // Regular Price
        const regularPriceInput = document.getElementsByName('regularPrice')[0];
        const regularPrice = regularPriceInput.value.trim();
        if (!regularPrice) {
            markInvalid(regularPriceInput, 'regularPrice-error', 'Regular price is required.');
            isValid = false;
        } else {
            const price = parseFloat(regularPrice);
            if (isNaN(price) || price < 0) {
                markInvalid(regularPriceInput, 'regularPrice-error', 'Please enter a valid non-negative number.');
                isValid = false;
            } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice)) {
                markInvalid(regularPriceInput, 'regularPrice-error', 'Price must have up to 2 decimal places.');
                isValid = false;
            }
        }

        // Sale Price
        const salePriceInput = document.getElementsByName('salePrice')[0];
        const salePrice = salePriceInput.value.trim();
        if (!salePrice) {
            markInvalid(salePriceInput, 'salePrice-error', 'Sale price is required.');
            isValid = false;
        } else {
            const price = parseFloat(salePrice);
            if (isNaN(price) || price < 0) {
                markInvalid(salePriceInput, 'salePrice-error', 'Please enter a valid non-negative number.');
                isValid = false;
            } else if (!/^\d+(\.\d{1,2})?$/.test(salePrice)) {
                markInvalid(salePriceInput, 'salePrice-error', 'Price must have up to 2 decimal places.');
                isValid = false;
            }
        }

        // Quantity
        const quantityInput = document.getElementsByName('quantity')[0];
        const quantity = quantityInput.value.trim();
        if (!quantity) {
            markInvalid(quantityInput, 'quantity-error', 'Stock quantity is required.');
            isValid = false;
        } else {
            const qty = parseInt(quantity);
            if (isNaN(qty) || qty < 0) {
                markInvalid(quantityInput, 'quantity-error', 'Please enter a valid non-negative number.');
                isValid = false;
            }
        }

        // Color
        const colorInput = document.getElementsByName('color')[0];
        const color = colorInput.value.trim();
        if (!color) {
            markInvalid(colorInput, 'color-error', 'Color is required.');
            isValid = false;
        } else if (color.length < 2 || color.length > 50) {
            markInvalid(colorInput, 'color-error', 'Color must be between 2 and 50 characters.');
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(color)) {
            markInvalid(colorInput, 'color-error', 'Color should contain only alphabetic characters.');
            isValid = false;
        }

        // Category
        const categorySelect = document.getElementsByName('category')[0];
        const category = categorySelect.value.trim();
        if (!category) {
            markInvalid(categorySelect, 'category-error', 'Please select a category.');
            isValid = false;
        }

        // Images
        const images = document.querySelectorAll('input[name="images"]');
        let imageSelected = false;
        images.forEach((input, index) => {
            if (input.files.length > 0) {
                imageSelected = true;
                const file = input.files[0];
                if (!validImageFormats.includes(file.type)) {
                    displayErrorMessage(`imageError${index + 1}`, 'Invalid image format. Only JPG and PNG are allowed.');
                    input.closest('.image-upload-box').classList.add('is-invalid');
                    isValid = false;
                }
                if (file.size > 5 * 1024 * 1024) {
                    displayErrorMessage(`imageError${index + 1}`, 'Image size must be less than 5MB.');
                    input.closest('.image-upload-box').classList.add('is-invalid');
                    isValid = false;
                }
            }
        });

        if (!imageSelected) {
            displayErrorMessage('imageError1', 'Please upload at least one product image.');
            document.getElementById('imageBox1').classList.add('is-invalid');
            isValid = false;
        }

        return isValid;
    }

    function markInvalid(element, errorId, message) {
        element.classList.add('is-invalid');
        displayErrorMessage(errorId, message);
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            console.log(`Error displayed: ${message}`); // Debugging
        }
    }

    function clearErrorMessages() {
        document.querySelectorAll('.error-message').forEach(el => {
            el.textContent = '';
            el.style.display = 'none';
        });
        document.querySelectorAll('.is-invalid').forEach(el => {
            el.classList.remove('is-invalid');
        });
    }
</script>

<%- include("../../views/partails/admin/footer.ejs") %>